- name: Ansible test
  hosts: localhost
  tasks:

  - name: include vars
    include_vars:
      dir: vars


  - name: launching AWS instance using Ansible
    ec2:
      key_name: edik3-key1
      instance_type: t2.micro
      image: ami-00399ec92321828f5
      region: us-east-2
      wait: yes
      group: edik3
      count: 2
      vpc_subnet_id: subnet-7f22a014
      assign_public_ip: yes
      aws_access_key: "{{ awsuser }}"
      aws_secret_key: "{{ awspass }}"
      assign_public_ip: yes
    register: output

#################

  - name: get ip1
    debug:
      var: output.instances[0].public_ip
    
  - name: add-host to awsbuilder
    add_host:
      name: "{{ output.instances[0].public_ip }}"
      groups: awsbuilder

###########################

  - name: get ip2
    debug:
      var: output.instances[1].public_ip


  - name: add-host to prod
    add_host:
      name: "{{ output.instances[1].public_ip }}"
      groups: awsprod

#############


#  - name: put-info-about-host-to ansible hosts
#    shell:
#      cmd: echo "{{ output.instances[0].public_ip }}" >> /etc/ansible/hosts & echo "[awsbuilder]" >> /etc/ansible/hosts

  - name: Pause for 1 minutes to build app cache
    pause:
      minutes: 1


  - name: Wait for SSH started1
    wait_for: 
      host: "{{ output.instances[0].public_ip }}" 
      port: 22 
      state: started
    with_items: ec2.instances

  - name: Wait for SSH started2
    wait_for:
      host: "{{ output.instances[1].public_ip }}"
      port: 22
      state: started
    with_items: ec2.instances


  - name: Write the new ec2 instance host key to known hosts
    connection: local
    shell: "ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts"


- name: install default-jdk, maven, git
  hosts: awsbuilder
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:

  - name: Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

  - name: Ensure package
    apt:
      pkg:      
      - maven
      - awscli
      - python3-pip

  - name: install boto
    shell:
      cmd: pip3 install boto & pip3 install boto3 & pip3 install botocore

  - name: get git project
    git: repo='https://github.com/tarekkhoury/mywebapplication.git' dest=/home/mywebapplication

  - name: make war
    shell:
      cmd:  mvn -f /home/mywebapplication/pom.xml clean package

  - name: inclide vars
    include_vars:
      dir: vars


  - name: copy file
    copy:
      src: ./awsconfigure.sh
      dest: /home/ubuntu/
      mode: '0777'

  - name: start sh
    shell:
      cmd: /home/ubuntu/awsconfigure.sh

  - name: put data s3
    shell:
      cmd :  aws s3 cp /home/mywebapplication/target/mywebapplication.war s3://web3.korolev.ru
#    delegate_to: 127.0.0.1





- name: put data to s3
  hosts: localhost
  #hosts: awsprod
  #remote_user: ubuntu
  #become: yes
  #become_user: root
  tasks:

  - name: include vars
    include_vars:
      dir: vars

######################################
################ install tomcat, pip3, awscli, boto. put sh scripts for aws configure and get data from s3
###########################

- name: install tomcat
  hosts: awsprod
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:

  - name: Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

  - name: Ensure package tomcat9
    apt:
      pkg:
      - tomcat9
      - awscli
      - python3-pip

  - name: Ensure tomcat9  service is started
    service:
      name: tomcat9  
      state: started

  - name: install boto
    shell:
      cmd: pip3 install boto 


  - name: copy file
    copy:
      src: ./awsconfigure.sh
      dest: /home/ubuntu/
      mode: '0777'

  - name: start sh
    shell:
      cmd: /home/ubuntu/awsconfigure.sh

  - name: get data s3
    shell:
      cmd :  aws s3 cp s3://web3.korolev.ru/mywebapplication.war /var/lib/tomcat9/webapps/mywebapplication.war